import sys

DEBUG= True

class Parse():
    """
    Parse Prism output generated by
    prism negotiation.pm -simpath 10 filename

    To get the parse output call __str__ or get_output which gives output in JSON format
    """
    matrix=[]
    purchase = 'no'
    time = sys.maxint
    utility = -sys.maxint-1


    def __init__(self,filename):
        def generate_matrix(filename):
            try:
                f = open ( filename , 'r')
                l = [ line.split(' ') for line in f ]
                return l
            except Exception as e:
                print ("Failed to initialize parse object due to ", e)
                sys.exit(1)

        self.matrix= generate_matrix(filename)
        self.get_purchase()
        self.get_time()
        self.get_utility()

    def get_matrix(self):
        if self.matrix == []:
            print ("Matrix is empty ..Exiting ")
            sys.exit(1)
        else :
            return self.matrix

    def get_output(self):
        status={'time' : self.time, 'purchase':self.purchase , 'utility':self.utility }
        return status

    def __str__(self):
        return str(self.get_output())

    def get_last_row(self):
        """
        Returns last row
        None if no purchased row
        """
        m=self.get_matrix()
        last_row=len(m)-1
        return m[last_row]

    def get_purchase(self):
        self.purchase ='yes' if self.get_last_row()[0] == '[PURCHASE]' else 'no'

    def get_time (self) :
        #if purchase was made get the time of purchase
        if self.purchase == 'yes':
            self.time = self.get_last_row()[1]

    def get_utility (self) :
        #if purchase was made utility of last cbid or bid (whichever was made before)
        if self.purchase == 'yes':
            m=self.get_matrix()
            for i in xrange((len(m)-1), -1, -1): # Efficient to parse list from last
                if m[i][0] == '[CBID]' :  self.utility = m[i][10] ; return ;
                if m[i][0] == '[BID]' : self.utility = m[i][3] ; return ;

if __name__=='__main__':

    print Parse('sample/sampleoutput.txt')
